# dev
.rules-merge-request-dev:
  if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
  variables:
    ENV: dev-0
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    LAMBDA_REPO: ${DEV_LAMBDA_REPO}
    LAMBDA_IMAGE: ${DEV_LAMBDA_REPO}:${CI_COMMIT_SHORT_SHA}
  changes:
    - build/ci/**/*
    - configs/pulumi/examples/$ENV.env
    - src/**/*
    - index.ts
    - yarn.lock

# staging
.rules-merge-request-staging:
  if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"
  variables:
    ENV: stg-0
    AWS_ACCESS_KEY_ID: ${STAGING_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${STAGING_AWS_SECRET_ACCESS_KEY}
    LAMBDA_REPO: ${STAGING_LAMBDA_REPO}
    LAMBDA_IMAGE: ${STAGING_LAMBDA_REPO}:${CI_COMMIT_SHORT_SHA}
  changes:
    - build/ci/**/*
    - configs/pulumi/examples/$ENV.env
    - src/**/*
    - index.ts
    - yarn.lock

# prod
.rules-merge-request-prod:
  if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
  variables:
    ENV: prod-0
    AWS_ACCESS_KEY_ID: ${PROD_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_AWS_SECRET_ACCESS_KEY}
    LAMBDA_REPO: ${PROD_LAMBDA_REPO}
    LAMBDA_IMAGE: ${PROD_LAMBDA_REPO}:${CI_COMMIT_SHORT_SHA}
  changes:
    - build/ci/**/*
    - configs/pulumi/examples/$ENV.env
    - src/**/*
    - index.ts
    - yarn.lock
